# Cursor Rules for Todo App

あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

## 原則

- 回答はすべて日本語でお願いします（Always respond in Japanese）
- 実際にコードを書き始める前に、先に設計を行い、ユーザに確認するようにしてください
- 設計したタスクをステップごとに1つずつ実行するようにしてください
- 各ステップを完了する前に、必ず test と lint を実行し、エラーがないことを確認してください
- 作業を完了する直前に、今回の変更をドキュメント化し、 `/docs` ディレクトリに保存してください
- 各ステップの完了後に、要点をユーザにレポートするようにしてください
- ステップを実行した結果、 `.cursorrules` の更新ができるようならば、それを提案してください

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。
- 設計ドキュメントは、都度 `/docs` ディレクトリに保存してください。
- **テストコードは必ず作成してください。** Vitestを使用し、単体テストと統合テストを適切に実装してください。
- **パッケージ間の依存関係は明確にしてください。** 循環参照を避け、適切な層構造を維持してください。
- **ドキュメントを各ステップ終了時に作成してください。** ドキュメントは `/docs` ディレクトリに保存してください。
- 仮の実装を作成する場合は、それが仮の実装であることをソースコードに明記してください。

## コーディング規約

### 命名規則

- パスカルケース: クラス、インターフェース、型
- キャメルケース: 変数、関数、メソッド
- スネークケース: 定数
- ケバブケース: ファイル名、ディレクトリ名

### ファイル構成

- コンポーネントファイル: `*.tsx`
- フックファイル: `*.hooks.ts`
- ユーティリティファイル: `*.utils.ts`
- テストファイル: `*.test.ts`
- スタイルファイル: `*.module.css`

### コードスタイル

- インデント: 2スペース
- 最大行長: 80文字
- セミコロン: 必須
- クォート: シングルクォート
- コメント: JSDoc形式

## テスト要件

- テストコードは必ず作成してください
- Vitestを使用し、単体テストと統合テストを適切に実装してください
- テストコードのテスト項目名は日本語で記載してください
- テストコードは、テスト対象と同じディレクトリに保存してください
- `__tests__` ディレクトリなどは作成しないでください

## アーキテクチャ要件

### Clean Architecture

- `packages/domain` にドメインロジックを実装する。
- アプリケーションコアはここに実装すること。他のパッケージに依存せずとも動作することを目指す。
  - ドメインモデル（エンティティ、値オブジェクト）
  - ドメインサービス
  - リポジトリインターフェース
  - ユースケース

### バックエンド

- クリーンアーキテクチャを採用
- 依存関係の方向は外から内へ（UI → ユースケース → ドメイン）
- 各レイヤーは独立して実装・テスト可能
- リポジトリパターンによるデータアクセスの抽象化
- トランザクション管理はリポジトリレベルで実施

### フロントエンド

- コンポーネントの責務を明確に分離
  - Container/Component パターンを採用
  - Component は主に `packages/ui` に配置
- データフェッチはReact Queryを使用
- 状態管理はReact Query + Zustandを使用
- パフォーマンス最適化を考慮したコンポーネント設計
- アクセシビリティに配慮したマークアップ

## パッケージ

### @cursor-rules-todoapp/repo-sqlite

- SQLiteリポジトリの実装
- Prismaクライアント
- データマッパー

### @cursor-rules-todoapp/repo-postgres（将来的）

- PostgreSQLリポジトリの実装
- Prismaクライアント
- データマッパー

### @cursor-rules-todoapp/common

- 型定義
- 定数
- ユーティリティ関数
- 他のパッケージから参照される共通機能

### @cursor-rules-todoapp/configs

- TypeScript設定
- Tailwind設定
- その他の共通設定

### @cursor-rules-todoapp/ui

- 共通UIコンポーネント
- Shadcn/UIコンポーネント
- スタイル定義
- Storybook
- テスト

### apps/web

- ページ実装
- APIルート
- アプリケーション固有の機能

## ドキュメント要件

- 各機能の設計ドキュメントを作成
- APIドキュメントを作成
- テスト仕様書を作成
- 運用手順書を作成
- すべてのドキュメントは `/docs` ディレクトリに保存
- ドキュメントは日本語で記載

## 技術スタック

### 開発環境

- TypeScript
- Node.js
- Monorepo
- Claude 3.5 Sonnet

### フロントエンドスタック

- React 19
- Next.js App Router
- Tailwind CSS
- Shadcn/UI

### バックエンドスタック

- TRPC
- Zod
- Prisma
- SQLite（開発環境）
- PostgreSQL（将来的な本番環境）

### 開発ツール

- pnpm
- Biome
- TurboRepo
- Vitest
- Storybook 8.5.1

## ファイル構造

```plaintext
root
├── apps                    # アプリケーション
│ ├── web                   # ウェブアプリケーション
│ │ ├── src
│ │ │ ├── app
│ │ │ │ ├── api           # API
│ │ │ │ ├── somePageName  # ページ
│ │ │ │ │ ├── components  # コンポーネント
│ │ │ │ │ ├── hooks      # フック
│ │ │ │ │ ├── page.tsx   # ページ
│ │ │ │ │ └── [id].tsx   # ページ
│ │ │ ├── components      # コンポーネント
│ │ │ ├── hooks          # フック
│ │ │ └── utils          # ユーティリティ
│ └── api                  # APIサーバー
│   ├── src
│   │ ├── router         # tRPCルーター
│   │ ├── container      # DIコンテナ
│   │ ├── middleware     # ミドルウェア
│   │ └── errors         # エラーハンドリング
├── packages               # パッケージ
│ ├── domain              # ドメイン層
│ │ ├── src
│ │ │ ├── entities      # エンティティ
│ │ │ ├── services      # ドメインサービス
│ │ │ ├── repositories  # リポジトリインターフェース
│ │ │ └── usecases      # ユースケース
│ ├── repo-sqlite         # SQLiteリポジトリ
│ │ ├── src
│ │ │ ├── repositories  # リポジトリ実装
│ │ │ └── mappers       # データマッパー
│ ├── ui                  # UI
│ ├── configs             # 各種設定ファイル
│ └── common              # ユーティリティ
├── docs                  # ドキュメント
├── .gitignore            # 無視するファイル
├── .turbo                # TurboRepoの設定
├── pnpm-lock.yaml        # pnpmのロックファイル
├── turbo.json            # TurboRepoの設定
├── tsconfig.json         # TypeScriptの設定
└── README.md             # プロジェクトの説明
```

## Git ワークフロー

### ブランチ命名規則
- 機能追加: `feature/機能名`
- バグ修正: `fix/修正内容`
  - 複数の改善を含む場合: `fix/対象-and-改善内容`
    例：`fix/darkmode-and-filter-improvements`
- リファクタリング: `refactor/変更内容`
- ドキュメント: `docs/ドキュメント内容`
- 設定変更: `config/設定内容`

### プルリクエストのレビュープロセス
1. レビューコメントへの対応
   - 具体的な修正内容をコメントで報告する
   - 修正後は必ず動作確認を行い、その結果を報告する
2. レビュー完了条件
   - レビュアーからの LGTM を得てからマージを実行する

### マージ後の後処理手順
1. プルリクエストをマージする
   ```bash
   gh pr merge <PR番号> --merge --delete-branch
   ```
2. mainブランチを最新に更新する
   ```bash
   git pull origin main
   ```

### ドキュメント更新
1. 作業完了後は必ず `docs/journal` に作業記録を残す
2. ジャーナルには以下を含める
   - 作業内容
   - プルリクエストの詳細
   - レビューコメントとその対応
   - 変更されたファイル一覧
   - 次のステップ
